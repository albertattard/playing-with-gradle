plugins {
    id 'application'
    id 'jvm-test-suite'
    id 'maven-publish'
}

// The application requires a command line argument, which can be passed using the `--args` followed by the arguments,
//  > ./gradlew run --args logflume
application {
    mainClass = 'aa.RideStatusService'
}

testing {
    suites {
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ORACLE
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

tasks.named('jar') {
    manifest {
        attributes('Main-Class': 'aa.RideStatusService')
    }

    // Use a custom Jar file name
    archiveFileName = 'theme-park.jar'
}

tasks.register('runJar', JavaExec) {
    classpath tasks.named('jar').map { it.outputs }
    classpath configurations.runtimeClasspath
    mainClass = 'aa.RideStatusService'
    args 'teacups'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// Configure the verbose options to just one task with the name 'compileJava'
// tasks.named('compileJava') {
// or configure all tasks of type JavaCompile, which also includes tests (task 'compileTestJava')
tasks.withType(JavaCompile).configureEach {
    options.verbose = true;
}

// Filter the files copied by the 'processResources' task
tasks.named('processResources') {
    include '**/*.txt'
}

// I tried to build and test the project with 2 versions of Java at the same time.  This approach did not work for me
//tasks.register("compileOn11", JavaCompile) {
//    javaCompiler = javaToolchains.launcherFor {
//        languageVersion = JavaLanguageVersion.of(11)
//        vendor = JvmVendorSpec.ADOPTOPENJDK
//    }
//}
//
//tasks.register("testOn11", Test) {
//    javaLauncher = javaToolchains.launcherFor {
//        languageVersion = JavaLanguageVersion.of(11)
//        vendor = JvmVendorSpec.ADOPTOPENJDK
//    }
//    dependsOn tasks.named("compileOn11");
//}
//
//tasks.named("check") {
//    dependsOn tasks.named("testOn11")
//}

// TODO: need to add the group id and version.
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url ''
            credentials {
                username ''
                password System.env.REPOSITORY_USER_PASSWORD
            }
        }
    }
}
